pystif
======

Collection of utilities to compute projections of high-dimensional
polytopes into lower dimensional subspaces. In particular, this software
focusses on linear cones as generated by Shannon type inequalities.

And by the way it includes a nice GLPK wrapper API that integrates well
with numpy.


Installation
~~~~~~~~~~~~

Before you get going you best install these dependencies

- python≥3.4
- GLPK
- setuptools (should be installed by default on many systems)
- cython
- numpy
- scipy
- docopt

If *docopt* is not available in your distribution's official repositories,
you can use ``pip`` to install it::

    pip install docopt

To build and install pystif, type::

    python setup.py install


Usage
~~~~~

The software package is split into many small independent components —
following a well-known UNIX principle.

The following subprograms are currently available:

- ``chm`` — compute convex hull given a set of extremal rays
- ``equiv`` — check two systems of inequalities for equivalence
- ``el_ineqs`` — output elemental inequalities to a file

These subprograms are available for execution by their name, e.g.:

.. code-block::

    chm ARGUMENTS…

To get individual usage information use the ``-h`` argument.


Other components
~~~~~~~~~~~~~~~~

There are a few more components which I have currently implemented in C++.
I will try to add the most important functionality here — without
sacraficing too much performance if at all possible.


Conventions
~~~~~~~~~~~

Most of the utilities input and output files that represent a linear system
of equations. The files have a simple matrix structure (``numpy.loadtxt``)
and each row corresponds to one inequality ``q∙x ≥ q₀``. The zero-th column
is used as inhomogeneity by letting ``x₀ = -1`` constant. However, when
performing IO on matrices of points (not equations) the zero-th column
should be ignored and may be set to ``0``.

When working with entropy spaces the component ``i`` corresponds to the
joint entropy ``H(I)`` of a subset ``I ⊂ {0, …, N-1}`` where the i-th
variable is in ``I`` iff the i-th bit is non-zero in ``i``, e.g.::

    i   bits    I

    0   000     {        }
    1   001     {X₀      }
    2   010     {   X₁   }
    3   011     {X₀,X₁   }
    4   100     {      X₂}
    5   101     {X₀,   X₂}

The zero-th vector component corresponds to the entropy of the empty set
which is defined to be zero. This matches up nicely with the inhomogeneity
convention explained above.
